package kr.or.kosta.wooriyo_and;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.TabActivity;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

public class Store extends Activity {
	private ListView listv;
	private TextView textv;
	private Button button;

	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.store);
		if (android.os.Build.VERSION.SDK_INT > 9) {
			StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
					.permitAll().build();
			StrictMode.setThreadPolicy(policy);
		}

		listv = (ListView) findViewById(R.id.me_list);
		textv = (TextView) findViewById(R.id.me_category);
		button = (Button) findViewById(R.id.menu_btn);
		//store 검색
		//store name 카테고리(치킨)
		String url = "http://192.168.7.120:8084/wooriyo_jsp/store_name.jsp";
		
		String url2 = "http://192.168.7.120:8084/wooriyo_jsp/store.jsp";
		ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
		ArrayList<NameValuePair> params2 = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair("store_category", "chicken"));
		
		params2.add(new BasicNameValuePair("store_name", "네네"));
		getHttpPost(url, params);
		getHttpPost2(url2, params2);
	}
	
	//------------치킨선택시 
	public void getHttpPost(String url, ArrayList<NameValuePair> params) {
		HttpClient client = new DefaultHttpClient();
		HttpPost httpPost = new HttpPost(url);
		StringBuffer jsonQuery = new StringBuffer();
		try {
			httpPost.setEntity(new UrlEncodedFormEntity(params,"euc-kr"));
			HttpResponse response = client.execute(httpPost);
			StatusLine statusLine = response.getStatusLine();
			int statusCode = statusLine.getStatusCode();

			if (statusCode == 200) {
				HttpEntity entity = response.getEntity();
				InputStream content = entity.getContent();
				BufferedReader br = new BufferedReader(new InputStreamReader(
						content));

				String m = "";
				while ((m = br.readLine()) != null) {
					jsonQuery.append(m).append("\r\n");
				}

				try {
					ArrayList<HashMap<String, String>> myArrayList = new ArrayList<HashMap<String, String>>();
					JSONArray data = new JSONArray(jsonQuery.toString());
					HashMap<String, String> map;
					for (int i = 0; i < data.length(); i++) {
						map=new HashMap<String, String>();
						JSONObject c = data.getJSONObject(i);
						StringBuffer sbf= new StringBuffer();
						sbf.append(c.getString("store_category"));
						
						map.put("store_image",c.getString("store_image"));
						
						map.put("store_name", c.getString("store_name"));
						map.put("store_time", c.getString("store_time"));
						textv.setText(sbf);
						myArrayList.add(map);
					}
					SimpleAdapter sAdapter = new SimpleAdapter(Store.this,myArrayList,
							R.layout.store_column,new String[] {"store_image","store_name","store_time"}
					,new int[]{R.id.menu_img,R.id.menu_name,R.id.menu_time});
					listv.setAdapter(sAdapter);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} else {
				Log.d("Error", "접속실패");
			}
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void getHttpPost2(String url, ArrayList<NameValuePair> params) {
		HttpClient client = new DefaultHttpClient();
		HttpPost httpPost = new HttpPost(url);
		StringBuffer jsonQuery = new StringBuffer();
		try {
			httpPost.setEntity(new UrlEncodedFormEntity(params));
			HttpResponse response = client.execute(httpPost);
			StatusLine statusLine = response.getStatusLine();
			int statusCode = statusLine.getStatusCode();

			if (statusCode == 200) {
				HttpEntity entity = response.getEntity();
				InputStream content = entity.getContent();
				BufferedReader br = new BufferedReader(new InputStreamReader(
						content));

				String m = "";
				while ((m = br.readLine()) != null) {
					jsonQuery.append(m).append("\r\n");
				}

				try {
					ArrayList<HashMap<String, String>> myArrayList = new ArrayList<HashMap<String, String>>();
					JSONArray data = new JSONArray(jsonQuery.toString());
					HashMap<String, String> map;
					for (int i = 0; i < data.length(); i++) {
						map=new HashMap<String, String>();
						JSONObject c = data.getJSONObject(i);
						StringBuffer sbf= new StringBuffer();
						sbf.append(c.getString("store_name"));
						
						map.put("store_image",c.getString("store_image"));
						map.put("store_name", c.getString("store_name"));
						map.put("store_time", c.getString("store_time"));
						textv.setText(sbf);
						myArrayList.add(map);
					}
					SimpleAdapter sAdapter = new SimpleAdapter(Store.this,myArrayList,
							R.layout.store_column,new String[] {"store_image","store_name","store_time"}
					,new int[]{R.id.menu_img,R.id.menu_name,R.id.menu_time});
					listv.setAdapter(sAdapter);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} else {
				Log.d("Error", "접속실패");
			}
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
