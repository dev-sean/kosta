package kr.or.kosta.and1013;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.Toast;

public class Ex3_GridView extends Activity {
	private GridView gv;
	private AlertDialog.Builder builder;
	// 이미지를 배열 객체로 생성
	private int[] arrImg = { R.drawable.sin1, R.drawable.sin2, R.drawable.sin3,
			R.drawable.sin4, R.drawable.sin5, R.drawable.sin6, R.drawable.sin7,
			R.drawable.sin8, R.drawable.sin9, R.drawable.sin10 };

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.ex3_gridview);
		gv = (GridView) findViewById(R.id.ex3_grid);
		builder = new AlertDialog.Builder(this);
		// 정의한 ImageAdapter를 생성해서 그리드 뷰에게 적용한다.
		gv.setAdapter(new ImageAdapter(this));

		gv.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				picture(position);
			}
		});

	}

	public void picture(int position) {
		builder.setTitle("My Dialog");
		builder.setIcon(arrImg[position]);		
		builder.setPositiveButton("Close", null);
		builder.show();
	}

	// Adapter를 커스터 마이징 하기 위해서 BaseAdapter를 상속받아서 내부클래스로 정의 한다.
	public class ImageAdapter extends BaseAdapter {
		private Context context;

		public ImageAdapter(Context context) {
			this.context = context;
		}

		@Override
		public int getCount() {
			return arrImg.length;
		}

		@Override
		public Object getItem(int position) {
			return position;
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// 이미지 객체를 생성
			ImageView imageView;
			// 배열로 부터 이미지를 읽어와서 이미지 뷰 객체와 결합
			// 뷰를 싱글톤 처리
			// 최초의 View일때만 이미지뷰를 초기화하여 실행한다.
			if (convertView == null) {
				imageView = new ImageView(context);
				// 그리드 뷰의 크기를 설정해서 이미지뷰의 크기를 조정
				imageView.setLayoutParams(new GridView.LayoutParams(100, 100));
				// 그리드의 틀의 크기가 GridView.LayoutParams이다.
				// 이거를 넓이 110에 높이 110으로 설정을
				// 해주면 imageView의 Param을 설정한다.
				imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
				imageView.setPadding(2, 2, 2, 2);

			} else {
				imageView = (ImageView) convertView;
			}
			imageView.setImageResource(arrImg[position]);

			return imageView;
		}

	}
}
